/*
 * Matrimonial API - OpenAPI 3.0
 *
 * Design and definition of Matrimonial APIs created for practice and teaching
 *
 * OpenAPI spec version: 1.0.11
 * Contact: floatingrays@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RoleApiController : ControllerBase
    { 
        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>Get all the roles</remarks>
        /// <param name="xRequestAuth">Authorization token value</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpGet]
        [Route("/api/role")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RoleGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Role>), description: "Successful operation")]
        public virtual IActionResult RoleGet([FromHeader]string xRequestAuth)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Role>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "[ {\n  \"roleName\" : \"roleName\",\n  \"id\" : 0,\n  \"permissionName\" : [ \"permissionName\", \"permissionName\" ]\n}, {\n  \"roleName\" : \"roleName\",\n  \"id\" : 0,\n  \"permissionName\" : [ \"permissionName\", \"permissionName\" ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Role>>(exampleJson)
                        : default(List<Role>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a existing role
        /// </summary>
        /// <remarks>Get a existing role</remarks>
        /// <param name="roleId"></param>
        /// <param name="xRequestAuth">Authorization token value</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpGet]
        [Route("/api/role/{roleId}")]
        [ValidateModelState]
        [SwaggerOperation("RoleRoleIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Role>), description: "Successful operation")]
        public virtual IActionResult RoleRoleIdGet([FromRoute][Required]string roleId, [FromHeader]string xRequestAuth)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Role>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "[ {\n  \"roleName\" : \"roleName\",\n  \"id\" : 0,\n  \"permissionName\" : [ \"permissionName\", \"permissionName\" ]\n}, {\n  \"roleName\" : \"roleName\",\n  \"id\" : 0,\n  \"permissionName\" : [ \"permissionName\", \"permissionName\" ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Role>>(exampleJson)
                        : default(List<Role>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
