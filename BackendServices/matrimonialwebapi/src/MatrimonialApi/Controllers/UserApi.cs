/*
 * Matrimonial API - OpenAPI 3.0
 *
 * Design and definition of Matrimonial APIs created for practice and teaching
 *
 * OpenAPI spec version: 1.0.11
 * Contact: floatingrays@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using MatrimonialApi.Attributes;
using MatrimonialApi.Security;
using Microsoft.AspNetCore.Authorization;
using MatrimonialApi.Models;
using MatrimonialApi.Interface;
using System.Threading.Tasks;
using System.Net.Http;
using MatrimonialApi.Utilities;
using System.Net;

namespace MatrimonialApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    {
        private readonly IUserService _userService;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApiController"/> class.
        /// </summary>
        /// <param name="userService">The admin service.</param>
        public UserApiController(IUserService userService)
        {
            _userService = userService;
        }

        /// <summary>
        /// Add a User
        /// </summary>
        /// <remarks> Add a User</remarks>
        /// <param name="body"> Add a User</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpPost]
        [Route("/api/user")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName,Roles = "superadmin")]
        [ValidateModelState]
        [SwaggerOperation("AddUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserDTO), description: "Successful operation")]
        public virtual async Task<IActionResult> AddUser([FromBody] UserDTO body)
        {
            try
            {
                //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
                // return StatusCode(200, default(CreateAdmin));

                //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
                // return StatusCode(400);

                //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
                // return StatusCode(422);

                //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
                // return StatusCode(500);

                //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
                // return StatusCode(0);
                var result = await _userService.AddUserAsync(body);
                return Ok(result);
            }
            catch (Exception ex)
            {
                var errorResponse = new ErrorResponse
                {
                    Message = ex.Message,
                    StatusCode = (int)HttpStatusCode.BadRequest
                };

                // Return the custom error response to the client
                return StatusCode(errorResponse.StatusCode, errorResponse);
            }
           
        }

        /// <summary>
        /// Get Users based in role
        /// </summary>
        /// <remarks> Get Users based in role</remarks>
        /// 
        /// <param name="roleName"></param>
        /// <remarks> Get Users based in role</remarks>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpGet]
        [Route("/api/user/{roleName}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName, Roles = "superadmin")]
        [ValidateModelState]
        [SwaggerOperation("UserGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserDTO>), description: "Successful operation")]
        public virtual async Task<IActionResult> UserGet([FromRoute][Required] string roleName)
        {
            var users = await _userService.GetAllUsersAsync(roleName);
            return Ok(users);
        }

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>Delete a user</remarks>
        /// 
        /// <param name="userId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpDelete]
        [Route("/api/user/{userId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName, Roles = "superadmin")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUser")]
        public virtual async Task<IActionResult> DeleteAdmin([FromRoute][Required] string userId)
        {
            
            var result= await _userService.DeleteUserAsync(userId);
            return Ok(result);
           
        }

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>get a user</remarks>
        /// <param name="userId"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpGet]
        [Route("/api/admin/{userId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName, Roles = "superadmin")]
        [ValidateModelState]
        [SwaggerOperation("GetUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserDTO), description: "Successful operation")]
        public virtual async Task<IActionResult> GetUser([FromRoute][Required] string userId)
        {
            var admin = await _userService.GetUserByIdAsync(userId);
            return Ok(admin);
        }

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>Update a user</remarks>
        /// <param name="body">Update a user</param>
        /// <param name="userId">The ID of the user</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpPut]
        [Route("/api/user/{userId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName, Roles = "superadmin")]
        [ValidateModelState]
        [SwaggerOperation("UpdateUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserDTO), description: "Successful operation")]
        public virtual async Task<IActionResult> UpdateUser([FromBody] UserDTO body, [FromRoute][Required] string userId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            var result= await _userService.UpdateUserAsync(userId, body);
            //var result = await _userService.UpdateUserAsync(adminId, body);
            return Ok(result);
        }
    }
}
