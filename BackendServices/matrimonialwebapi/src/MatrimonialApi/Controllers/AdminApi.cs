/*
 * Matrimonial API - OpenAPI 3.0
 *
 * Design and definition of Matrimonial APIs created for practice and teaching
 *
 * OpenAPI spec version: 1.0.11
 * Contact: floatingrays@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using MatrimonialApi.Attributes;
using MatrimonialApi.Security;
using Microsoft.AspNetCore.Authorization;
using MatrimonialApi.Models;

namespace MatrimonialApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AdminApiController : ControllerBase
    {
        private readonly IAdminService _adminService;
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApiController"/> class.
        /// </summary>
        /// <param name="adminService">The admin service.</param>
        public AdminApiController(IAdminService adminService)
        {
            _adminService = adminService;
        }

        /// <summary>
        /// Add a admin to the system
        /// </summary>
        /// <remarks>Add a admin to the system</remarks>
        /// <param name="body">Create a new admin</param>
        /// <param name="xRequestAuth">Authorization token value</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpPost]
        [Route("/api/admin")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddAdmin")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreatedAdmin), description: "Successful operation")]
        public virtual IActionResult AddAdmin([FromBody]Admin body, [FromHeader]string xRequestAuth)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreatedAdmin));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "{\n  \"accountLocked\" : false,\n  \"firstName\" : \"Ram\",\n  \"lastName\" : \"Sanatani\",\n  \"passwordResetDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"middleName\" : \"kumar\",\n  \"emailId\" : \"Ram@gmail.com\",\n  \"isSuperAdmin\" : true,\n  \"isActive\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<CreatedAdmin>(exampleJson)
                        : default(CreatedAdmin);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all admins
        /// </summary>
        /// <remarks>Get all the admins present in the system</remarks>
        /// <param name="xRequestAuth">Authorization token value</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpGet]
        [Route("/api/admin")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AdminGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CreatedAdmin>), description: "Successful operation")]
        public virtual IActionResult AdminGet([FromHeader]string xRequestAuth)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CreatedAdmin>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "[ {\n  \"accountLocked\" : false,\n  \"firstName\" : \"Ram\",\n  \"lastName\" : \"Sanatani\",\n  \"passwordResetDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"middleName\" : \"kumar\",\n  \"emailId\" : \"Ram@gmail.com\",\n  \"isSuperAdmin\" : true,\n  \"isActive\" : true\n}, {\n  \"accountLocked\" : false,\n  \"firstName\" : \"Ram\",\n  \"lastName\" : \"Sanatani\",\n  \"passwordResetDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"middleName\" : \"kumar\",\n  \"emailId\" : \"Ram@gmail.com\",\n  \"isSuperAdmin\" : true,\n  \"isActive\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<CreatedAdmin>>(exampleJson)
                        : default(List<CreatedAdmin>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a admin
        /// </summary>
        /// <remarks>Delete a admin</remarks>
        /// <param name="adminId"></param>
        /// <param name="xRequestAuth">Authorization token value</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpDelete]
        [Route("/api/admin/{adminId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAdmin")]
        public virtual IActionResult DeleteAdmin([FromRoute][Required]string adminId, [FromHeader][Required()]string xRequestAuth)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a admin from the system
        /// </summary>
        /// <remarks>Get a admin to the system</remarks>
        /// <param name="adminId"></param>
        /// <param name="xRequestAuth">Authorization token value</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpGet]
        [Route("/api/admin/{adminId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetAdmin")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreatedAdmin), description: "Successful operation")]
        public virtual IActionResult GetAdmin([FromRoute][Required]string adminId, [FromHeader][Required()]string xRequestAuth)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreatedAdmin));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "{\n  \"accountLocked\" : false,\n  \"firstName\" : \"Ram\",\n  \"lastName\" : \"Sanatani\",\n  \"passwordResetDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"createdDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"middleName\" : \"kumar\",\n  \"emailId\" : \"Ram@gmail.com\",\n  \"isSuperAdmin\" : true,\n  \"isActive\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<CreatedAdmin>(exampleJson)
                        : default(CreatedAdmin);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update a admin
        /// </summary>
        /// <remarks>Update a admin</remarks>
        /// <param name="body">Update a admin</param>
        /// <param name="adminId"></param>
        /// <param name="xRequestAuth">Authorization token value</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        /// <response code="500">An error occured while processing the request.</response>
        /// <response code="0">Default error</response>
        [HttpPut]
        [Route("/api/admin/{adminId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateAdmin")]
        public virtual IActionResult UpdateAdmin([FromBody]Admin body, [FromRoute][Required]string adminId, [FromHeader]string xRequestAuth)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }
    }
}
