/*
 * Matrimonial API - OpenAPI 3.0
 *
 * Design and definition of Matrimonial APIs created for practice and teaching
 *
 * OpenAPI spec version: 1.0.11
 * Contact: floatingrays@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace MatrimonialApi.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HomeSearch : IEquatable<HomeSearch>
    {
        /// <summary>
        /// Gets or Sets LookingFor
        /// </summary>
        [Required]

        [DataMember(Name = "lookingFor")]
        public string LookingFor { get; set; }

        /// <summary>
        /// Gets or Sets AgeFrom
        /// </summary>
        [Required]

        [DataMember(Name = "ageFrom")]
        public long? AgeFrom { get; set; }

        /// <summary>
        /// Gets or Sets AgeTo
        /// </summary>
        [Required]

        [DataMember(Name = "ageTo")]
        public long? AgeTo { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]

        [DataMember(Name = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [Required]

        [DataMember(Name = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets MotherTounge
        /// </summary>
        [Required]

        [DataMember(Name = "motherTounge")]
        public string MotherTounge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HomeSearch {\n");
            sb.Append("  LookingFor: ").Append(LookingFor).Append("\n");
            sb.Append("  AgeFrom: ").Append(AgeFrom).Append("\n");
            sb.Append("  AgeTo: ").Append(AgeTo).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  MotherTounge: ").Append(MotherTounge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HomeSearch)obj);
        }

        /// <summary>
        /// Returns true if HomeSearch instances are equal
        /// </summary>
        /// <param name="other">Instance of HomeSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HomeSearch other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    LookingFor == other.LookingFor ||
                    LookingFor != null &&
                    LookingFor.Equals(other.LookingFor)
                ) &&
                (
                    AgeFrom == other.AgeFrom ||
                    AgeFrom != null &&
                    AgeFrom.Equals(other.AgeFrom)
                ) &&
                (
                    AgeTo == other.AgeTo ||
                    AgeTo != null &&
                    AgeTo.Equals(other.AgeTo)
                ) &&
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) &&
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) &&
                (
                    MotherTounge == other.MotherTounge ||
                    MotherTounge != null &&
                    MotherTounge.Equals(other.MotherTounge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (LookingFor != null)
                    hashCode = hashCode * 59 + LookingFor.GetHashCode();
                if (AgeFrom != null)
                    hashCode = hashCode * 59 + AgeFrom.GetHashCode();
                if (AgeTo != null)
                    hashCode = hashCode * 59 + AgeTo.GetHashCode();
                if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                if (MotherTounge != null)
                    hashCode = hashCode * 59 + MotherTounge.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(HomeSearch left, HomeSearch right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HomeSearch left, HomeSearch right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
