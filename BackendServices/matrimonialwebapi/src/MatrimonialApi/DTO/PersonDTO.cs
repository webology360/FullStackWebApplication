/*
 * Matrimonial API - OpenAPI 3.0
 *
 * Design and definition of Matrimonial APIs created for practice and teaching
 *
 * OpenAPI spec version: 1.0.11
 * Contact: floatingrays@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace MatrimonialApi.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonDTO : IEquatable<PersonDTO>
    { 
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]

        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [Required]

        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]

        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [Required]

        [DataMember(Name="dateOfBirth")]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [Required]

        [DataMember(Name="height")]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets BodyComplexion
        /// </summary>
        [Required]

        [DataMember(Name="bodyComplexion")]
        public string BodyComplexion { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum MaleEnum for male
            /// </summary>
            [EnumMember(Value = "male")]
            MaleEnum = 0,
            /// <summary>
            /// Enum FemaleEnum for female
            /// </summary>
            [EnumMember(Value = "female")]
            FemaleEnum = 1        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [Required]

        [DataMember(Name="gender")]
        public GenderEnum? Gender { get; set; }

        /// <summary>
        /// Gets or Sets ZodiacSign
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ZodiacSignEnum
        {
            /// <summary>
            /// Enum AriesMeaEnum for Aries (Meṣa)
            /// </summary>
            [EnumMember(Value = "Aries (Meṣa)")]
            AriesMeaEnum = 0,
            /// <summary>
            /// Enum TaurusVabhaEnum for Taurus (Vṛṣabha)
            /// </summary>
            [EnumMember(Value = "Taurus (Vṛṣabha)")]
            TaurusVabhaEnum = 1,
            /// <summary>
            /// Enum GeminiMithunaEnum for Gemini (Mithuna)
            /// </summary>
            [EnumMember(Value = "Gemini (Mithuna)")]
            GeminiMithunaEnum = 2,
            /// <summary>
            /// Enum LeoSihaEnum for Leo (Siṃha)
            /// </summary>
            [EnumMember(Value = "Leo (Siṃha)")]
            LeoSihaEnum = 3        }

        /// <summary>
        /// Gets or Sets ZodiacSign
        /// </summary>
        [Required]

        [DataMember(Name="zodiacSign")]
        public ZodiacSignEnum? ZodiacSign { get; set; }

        /// <summary>
        /// Gets or Sets IsBride
        /// </summary>
        [Required]

        [DataMember(Name="isBride")]
        public bool? IsBride { get; set; }

        /// <summary>
        /// Gets or Sets IsGroom
        /// </summary>
        [Required]

        [DataMember(Name="isGroom")]
        public bool? IsGroom { get; set; }

        /// <summary>
        /// Gets or Sets ImageURL
        /// </summary>
        [Required]

        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// Gets or Sets BiodataURL
        /// </summary>
        [Required]

        [DataMember(Name="biodataURL")]
        public string BiodataURL { get; set; }

        /// <summary>
        /// Gets or Sets Religion
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReligionEnum
        {
            /// <summary>
            /// Enum HinduEnum for Hindu
            /// </summary>
            [EnumMember(Value = "Hindu")]
            HinduEnum = 0        }

        /// <summary>
        /// Gets or Sets Religion
        /// </summary>
        [Required]

        [DataMember(Name="religion")]
        public ReligionEnum? Religion { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>

        [DataMember(Name="contact")]
        public PersonContactDTO Contact { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>

        [DataMember(Name="address")]
        public PersonAddressDTO Address { get; set; }

        /// <summary>
        /// Gets or Sets Occupation
        /// </summary>

        [DataMember(Name="Occupation")]
        public PersonOccupationDTO Occupation { get; set; }

        /// <summary>
        /// Gets or Sets MatchPreferance
        /// </summary>

        [DataMember(Name="MatchPreferance")]
        public PersonMatchPreferanceDTO MatchPreferance { get; set; }

        /// <summary>
        /// Gets or Sets EducationalQualification
        /// </summary>

        [DataMember(Name="EducationalQualification")]
        public List<EducationDTO> EducationalQualification { get; set; }

        /// <summary>
        /// Gets or Sets Relative
        /// </summary>

        [DataMember(Name="Relative")]
        public List<RelativeDTO> Relative { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  BodyComplexion: ").Append(BodyComplexion).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  ZodiacSign: ").Append(ZodiacSign).Append("\n");
            sb.Append("  IsBride: ").Append(IsBride).Append("\n");
            sb.Append("  IsGroom: ").Append(IsGroom).Append("\n");
            sb.Append("  ImageURL: ").Append(ImageURL).Append("\n");
            sb.Append("  BiodataURL: ").Append(BiodataURL).Append("\n");
            sb.Append("  Religion: ").Append(Religion).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Occupation: ").Append(Occupation).Append("\n");
            sb.Append("  MatchPreferance: ").Append(MatchPreferance).Append("\n");
            sb.Append("  EducationalQualification: ").Append(EducationalQualification).Append("\n");
            sb.Append("  Relative: ").Append(Relative).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonDTO)obj);
        }

        /// <summary>
        /// Returns true if Person instances are equal
        /// </summary>
        /// <param name="other">Instance of Person to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    MiddleName == other.MiddleName ||
                    MiddleName != null &&
                    MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    DateOfBirth == other.DateOfBirth ||
                    DateOfBirth != null &&
                    DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    BodyComplexion == other.BodyComplexion ||
                    BodyComplexion != null &&
                    BodyComplexion.Equals(other.BodyComplexion)
                ) && 
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    ZodiacSign == other.ZodiacSign ||
                    ZodiacSign != null &&
                    ZodiacSign.Equals(other.ZodiacSign)
                ) && 
                (
                    IsBride == other.IsBride ||
                    IsBride != null &&
                    IsBride.Equals(other.IsBride)
                ) && 
                (
                    IsGroom == other.IsGroom ||
                    IsGroom != null &&
                    IsGroom.Equals(other.IsGroom)
                ) && 
                (
                    ImageURL == other.ImageURL ||
                    ImageURL != null &&
                    ImageURL.Equals(other.ImageURL)
                ) && 
                (
                    BiodataURL == other.BiodataURL ||
                    BiodataURL != null &&
                    BiodataURL.Equals(other.BiodataURL)
                ) && 
                (
                    Religion == other.Religion ||
                    Religion != null &&
                    Religion.Equals(other.Religion)
                ) && 
                (
                    Contact == other.Contact ||
                    Contact != null &&
                    Contact.Equals(other.Contact)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Occupation == other.Occupation ||
                    Occupation != null &&
                    Occupation.Equals(other.Occupation)
                ) && 
                (
                    MatchPreferance == other.MatchPreferance ||
                    MatchPreferance != null &&
                    MatchPreferance.Equals(other.MatchPreferance)
                ) && 
                (
                    EducationalQualification == other.EducationalQualification ||
                    EducationalQualification != null &&
                    EducationalQualification.SequenceEqual(other.EducationalQualification)
                ) && 
                (
                    Relative == other.Relative ||
                    Relative != null &&
                    Relative.SequenceEqual(other.Relative)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (MiddleName != null)
                    hashCode = hashCode * 59 + MiddleName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (DateOfBirth != null)
                    hashCode = hashCode * 59 + DateOfBirth.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    if (BodyComplexion != null)
                    hashCode = hashCode * 59 + BodyComplexion.GetHashCode();
                    if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (ZodiacSign != null)
                    hashCode = hashCode * 59 + ZodiacSign.GetHashCode();
                    if (IsBride != null)
                    hashCode = hashCode * 59 + IsBride.GetHashCode();
                    if (IsGroom != null)
                    hashCode = hashCode * 59 + IsGroom.GetHashCode();
                    if (ImageURL != null)
                    hashCode = hashCode * 59 + ImageURL.GetHashCode();
                    if (BiodataURL != null)
                    hashCode = hashCode * 59 + BiodataURL.GetHashCode();
                    if (Religion != null)
                    hashCode = hashCode * 59 + Religion.GetHashCode();
                    if (Contact != null)
                    hashCode = hashCode * 59 + Contact.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Occupation != null)
                    hashCode = hashCode * 59 + Occupation.GetHashCode();
                    if (MatchPreferance != null)
                    hashCode = hashCode * 59 + MatchPreferance.GetHashCode();
                    if (EducationalQualification != null)
                    hashCode = hashCode * 59 + EducationalQualification.GetHashCode();
                    if (Relative != null)
                    hashCode = hashCode * 59 + Relative.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonDTO left, PersonDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonDTO left, PersonDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
