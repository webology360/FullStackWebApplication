/*
 * Matrimonial API - OpenAPI 3.0
 *
 * Design and definition of Matrimonial APIs created for practice and teaching
 *
 * OpenAPI spec version: 1.0.11
 * Contact: floatingrays@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreatedAdmin : IEquatable<CreatedAdmin>
    { 
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>

        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>

        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>

        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets EmailId
        /// </summary>

        [DataMember(Name="emailId")]
        public string EmailId { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>

        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsSuperAdmin
        /// </summary>

        [DataMember(Name="isSuperAdmin")]
        public bool? IsSuperAdmin { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>

        [DataMember(Name="createdDateTime")]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets AccountLocked
        /// </summary>

        [DataMember(Name="accountLocked")]
        public bool? AccountLocked { get; set; }

        /// <summary>
        /// Gets or Sets PasswordResetDateTime
        /// </summary>

        [DataMember(Name="passwordResetDateTime")]
        public DateTime? PasswordResetDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatedAdmin {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSuperAdmin: ").Append(IsSuperAdmin).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  AccountLocked: ").Append(AccountLocked).Append("\n");
            sb.Append("  PasswordResetDateTime: ").Append(PasswordResetDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreatedAdmin)obj);
        }

        /// <summary>
        /// Returns true if CreatedAdmin instances are equal
        /// </summary>
        /// <param name="other">Instance of CreatedAdmin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatedAdmin other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    MiddleName == other.MiddleName ||
                    MiddleName != null &&
                    MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    EmailId == other.EmailId ||
                    EmailId != null &&
                    EmailId.Equals(other.EmailId)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsSuperAdmin == other.IsSuperAdmin ||
                    IsSuperAdmin != null &&
                    IsSuperAdmin.Equals(other.IsSuperAdmin)
                ) && 
                (
                    CreatedDateTime == other.CreatedDateTime ||
                    CreatedDateTime != null &&
                    CreatedDateTime.Equals(other.CreatedDateTime)
                ) && 
                (
                    AccountLocked == other.AccountLocked ||
                    AccountLocked != null &&
                    AccountLocked.Equals(other.AccountLocked)
                ) && 
                (
                    PasswordResetDateTime == other.PasswordResetDateTime ||
                    PasswordResetDateTime != null &&
                    PasswordResetDateTime.Equals(other.PasswordResetDateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (MiddleName != null)
                    hashCode = hashCode * 59 + MiddleName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (EmailId != null)
                    hashCode = hashCode * 59 + EmailId.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsSuperAdmin != null)
                    hashCode = hashCode * 59 + IsSuperAdmin.GetHashCode();
                    if (CreatedDateTime != null)
                    hashCode = hashCode * 59 + CreatedDateTime.GetHashCode();
                    if (AccountLocked != null)
                    hashCode = hashCode * 59 + AccountLocked.GetHashCode();
                    if (PasswordResetDateTime != null)
                    hashCode = hashCode * 59 + PasswordResetDateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreatedAdmin left, CreatedAdmin right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreatedAdmin left, CreatedAdmin right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
